version: "3.8"
services:
  mongodb:
    image: mongo:latest
    volumes:
      #- ./database:/data/db
      - mongodb:/data/db
    command: mongod --bind_ip=0.0.0.0 --logpath=/dev/null
    expose:
      - 27017
    deploy:
      mode: replicated
      replicas: 1
      #update-delay: 10s
      #placement:
      #  constraints: [node.role == worker]
      
  usdt-doge:
    image: innovanon/zenbot
    volumes:
      - bot0:/app/simulations
    restart: always
    depends_on:
      - mongodb
    links:
      - mongodb
    environment:
      - ZENBOT_MONGODB_HOST=mongodb
    env_file:
      - .common.env
      - .usdt-doge.env
    command: trade
    deploy:
      mode: replicated
      replicas: 1

  flo-btc:
    image: innovanon/zenbot
    volumes:
      - bot1:/app/simulations
    restart: always
    depends_on:
      - mongodb
    links:
      - mongodb
    environment:
      - ZENBOT_MONGODB_HOST=mongodb
    env_file:
      - .common.env
      - .flo-btc.env
    command: trade
    deploy:
      mode: replicated
      replicas: 1

  eth-ltc:
    image: innovanon/zenbot
    volumes:
      - bot2:/app/simulations
    restart: always
    depends_on:
      - mongodb
    links:
      - mongodb
    environment:
      - ZENBOT_MONGODB_HOST=mongodb
    env_file:
      - .common.env
      - .eth-ltc.env
    command: trade
    deploy:
      mode: replicated
      replicas: 1
        
  usd-dgb:
    image: innovanon/zenbot
    volumes:
      - bot3:/app/simulations
    restart: always
    depends_on:
      - mongodb
    links:
      - mongodb
    environment:
      - ZENBOT_MONGODB_HOST=mongodb
    env_file:
      - .common.env
      - .usd-dgb.env
    command: trade
    deploy:
      mode: replicated
      replicas: 1

  usd-xmr:
    image: innovanon/zenbot
    volumes:
      - bot4:/app/simulations
    restart: always
    depends_on:
      - mongodb
    links:
      - mongodb
    environment:
      - ZENBOT_MONGODB_HOST=mongodb
    env_file:
      - .common.env
      - .usd-xmr.env
    command: trade
    deploy:
      mode: replicated
      replicas: 1






#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

#  usd-dash:
#    image: innovanon/zenbot
#    volumes:
#      - bot3:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-dash.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  usd-eth:
#    image: innovanon/zenbot
#    volumes:
#      - bot2:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-eth.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  eth-dash:
#    image: innovanon/zenbot
#    volumes:
#      - bot2:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .eth-dash.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  usd-btc:
#    image: innovanon/zenbot
#    volumes:
#      - bot1:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-btc.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1
  
#  usdt-doge:
#    image: innovanon/zenbot
#    volumes:
#      - bot0:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usdt-doge.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  eth-xmr:
#    image: innovanon/zenbot
#    volumes:
#      - bot2:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .eth-xmr.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  eth-dash:
#    image: innovanon/zenbot
#    volumes:
#      - bot2:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .eth-dash.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1
  
#  eth-ltc:
#    image: innovanon/zenbot
#    volumes:
#      - bot2:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .eth-ltc.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  eur-bch:
#    image: innovanon/zenbot
#    volumes:
#      - bot4:/app/simulations/
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .eur-bch.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  usd-doge:
#    image: innovanon/zenbot
#    volumes:
#      - bot3:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-doge.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  usd-bch:
#    image: innovanon/zenbot
#    volumes:
#      - bot3:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-bch.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  usd-dgb:
#    image: innovanon/zenbot
#    volumes:
#      - bot3:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-dgb.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1

#  usd-ltc:
#    image: innovanon/zenbot
#    volumes:
#      - bot3:/app/simulations
#    restart: always
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .common.env
#      - .usd-ltc.env
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1






#  server:
#    #build:
#    #  context: .
#    #  dockerfile: Dockerfile
#    image: fculpo/zenbot:latest
#    volumes:
#      - ./simulations/:/app/simulations/
#    restart: always
#    #tty: true
#    ports:
#      - "17365:17365"
#    depends_on:
#      - mongodb
#    environment:
#      - ZENBOT_MONGODB_HOST=mongodb
#    env_file:
#      - .env
#    #stdin_open: true
#    command: trade
#    deploy:
#      mode: replicated
#      replicas: 1
#      #update-delay: 10s
#      #placement:
#      #  constraints: [node.role == worker]





  # Remove below comments to use this container. "adminMongo is a Web based user interface (GUI) to handle all your MongoDB connections/databases needs."
  #
#  adminmongo:
#    image: mrvautin/adminmongo
#    links:
#      - mongodb
#    #tty: true
#    ports:
#      - "127.0.0.1:1234:1234"
#    environment:
#      - CONN_NAME=zenbot_mongodb
#      - DB_HOST=mongodb
#      - DB_PORT=27017
#      - HOST=0.0.0.0
#    command: "npm start"
#    deploy:
#      mode: replicated
#      replicas: 1
#      #update-delay: 10s
#      #placement:
#      #  constraints: [node.role == worker]
volumes:
  mongodb:
  bot0:
  bot1:
  bot2:
  bot3:
  bot4:
  bot5:

